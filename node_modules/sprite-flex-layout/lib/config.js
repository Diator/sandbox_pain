'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Config = function () {
  function Config() {
    var _this = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var node = arguments[1];
    (0, _classCallCheck3.default)(this, Config);

    this.config = {};
    this.node = node;
    (0, _keys2.default)(config).forEach(function (item) {
      if (!_util.flexProperties.includes(item)) {
        throw new Error('config ' + item + ' is not valid');
      }
      _this[item] = config[item];
    });
  }

  (0, _createClass3.default)(Config, [{
    key: 'parse',
    value: function parse() {
      this.parseBorder();
      this.parsePadding();
      this.parseMargin();
      this.parseFlex();
      this.parseFlexFlow();
      this.parseFlexProps();
      this.parseSize();
      this.parseComputedWidth();
      this.parseComputedHeight();
      this.parseLayoutWidth();
      this.parseLayoutHeight();
    }
  }, {
    key: 'parseNumberValue',
    value: function parseNumberValue(value, parentValue) {
      if (value === 'auto' || typeof value === 'number') return value;
      if (!value) return 0;
      var percentValue = (0, _util.parsePercentValue)(value);
      if (typeof percentValue === 'number') {
        if (typeof parentValue === 'string') {
          parentValue = this.node.parent[parentValue];
        }
        value = percentValue * parentValue;
      } else if (/^[\d.-]+$/.test(value)) {
        value = parseFloat(value, 10);
      } else {
        throw new Error(value + ' is not a number');
      }
      return value;
    }
  }, {
    key: 'parseBorder',
    value: function parseBorder() {
      var _this2 = this;

      var border = this.border || [0, 0, 0, 0];
      if (border) {
        border = (0, _util.parseCombineValue)(border).map(function (item) {
          return _this2.parseNumberValue(item);
        });
      }
      var borderList = ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'];
      this.border = borderList.map(function (item, index) {
        _this2[item] = _this2.parseNumberValue(_this2[item]) || border[index];
        if (_this2[item] < 0 || _this2[item] === 'auto') {
          throw new Error(item + ':' + _this2[item] + ' is not valid');
        }
        return _this2[item];
      });
    }
  }, {
    key: 'parsePadding',
    value: function parsePadding() {
      var _this3 = this;

      var padding = this.padding || [0, 0, 0, 0];
      if (padding) {
        padding = (0, _util.parseCombineValue)(padding).map(function (item) {
          return _this3.parseNumberValue(item, 'width');
        });
      }
      var paddingList = ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];
      this.padding = paddingList.map(function (item, index) {
        _this3[item] = _this3.parseNumberValue(_this3[item], 'width') || padding[index];
        if (_this3[item] < 0 || _this3[item] === 'auto') {
          throw new Error(item + ':' + _this3[item] + ' is not valid');
        }
        return _this3[item];
      });
    }
  }, {
    key: 'parseMargin',
    value: function parseMargin() {
      var _this4 = this;

      var margin = this.margin || [0, 0, 0, 0];
      if (margin) {
        margin = (0, _util.parseCombineValue)(margin).map(function (item) {
          return _this4.parseNumberValue(item, 'width');
        });
      }
      var marginList = ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'];
      this.margin = marginList.map(function (item, index) {
        _this4[item] = _this4.parseNumberValue(_this4[item], 'width') || margin[index];
        return _this4[item];
      });
    }
  }, {
    key: 'parseFlex',
    value: function parseFlex() {
      var flex = this.flex;
      if (flex) {
        if (typeof flex === 'number') {
          this.flexGrow = this.flexGrow || flex;
        } else {
          var _flex$split = flex.split(/\s+/),
              _flex$split2 = (0, _slicedToArray3.default)(_flex$split, 3),
              flexFlow = _flex$split2[0],
              flexShrink = _flex$split2[1],
              _flexBasis = _flex$split2[2];

          if (!this.flexFlow) {
            this.flexFlow = flexFlow;
          }
          if (!this.flexShrink) {
            this.flexShrink = flexShrink;
          }
          if (!this.flexBasis) {
            this.flexBasis = _flexBasis;
          }
        }
      }
      this.flexShrink = parseFloat(this.flexShrink) || 1;
      this.flexGrow = parseFloat(this.flexGrow) || 0;
      var flexBasis = this.flexBasis;
      if (flexBasis) {
        var flexDirection = this.node.parent.flexDirection;
        var isRow = flexDirection === 'row' || flexDirection === 'row-reverse';
        flexBasis = this.parseNumberValue(flexBasis, isRow ? 'width' : 'height');
        this.flexBasis = flexBasis;
      } else if (this.flexBasis === '') {
        this.flexBasis = undefined;
      }
    }
  }, {
    key: 'parseSize',
    value: function parseSize() {
      var _this5 = this;

      var widths = ['width', 'minWidth', 'maxWidth'];
      widths.forEach(function (item) {
        _this5[item] = _this5.parseNumberValue(_this5[item], 'width') || 0;
      });
      if (this.width && !this.offsetWidth) {
        this.offsetWidth = this.width;
      }
      var heights = ['height', 'minHeight', 'maxHeight'];
      heights.forEach(function (item) {
        _this5[item] = _this5.parseNumberValue(_this5[item], 'height') || 0;
      });
      if (this.height && !this.offsetHeight) {
        this.offsetHeight = this.height;
      }
    }
  }, {
    key: 'parseFlexFlow',
    value: function parseFlexFlow() {
      var _this6 = this;

      var flexFlow = this.flexFlow;
      if (flexFlow) {
        flexFlow.split(/\s+/).forEach(function (item) {
          if (_util.flexDirectionValues.includes(item)) {
            _this6.flexDirection = item;
          } else if (_util.flexWrapValues.includes(item)) {
            _this6.flexWrap = item;
          } else {
            throw new Error('FlexFlow: ' + flexFlow + ' is not valid');
          }
        });
      }
    }
  }, {
    key: 'parseFlexProps',
    value: function parseFlexProps() {
      var _this7 = this;

      var props = {
        flexDirection: _util.flexDirectionValues,
        flexWrap: _util.flexWrapValues,
        justifyContent: _util.justifyContentValues,
        alignItems: _util.alignItemsValues,
        alignSelf: _util.alignSelfValues,
        alignContent: _util.alignContentValues
      };
      (0, _keys2.default)(props).forEach(function (item) {
        if (_this7[item]) {
          var allowValues = props[item];
          if (allowValues.indexOf(_this7[item]) === -1) {
            throw new Error(item + ' value:' + _this7[item] + ' is not valid');
          }
        } else {
          _this7[item] = props[item][0];
        }
      });
    }
  }, {
    key: 'getFlexBasis',
    value: function getFlexBasis() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'width';

      var flexDirection = this.node.parent.flexDirection;
      var flexBasis = this.flexBasis;
      if (flexBasis !== undefined && flexBasis !== 'auto') {
        var isRow = flexDirection === 'row' || flexDirection === 'row-reverse';
        if (type === 'width' && isRow || type === 'height' && !isRow) {
          return this.parseNumberValue(flexBasis, isRow ? 'width' : 'height');
        }
      }
    }
  }, {
    key: 'parseComputedWidth',
    value: function parseComputedWidth() {
      var width = this.getFlexBasis('width');
      if (width === undefined) {
        width = this.offsetWidth || 0;
      }
      var minWidth = this.minWidth;
      var maxWidth = this.maxWidth;
      if (maxWidth && minWidth && maxWidth < minWidth) {
        maxWidth = minWidth;
      }
      if (minWidth && width < minWidth) {
        width = minWidth;
      }
      if (maxWidth && width > maxWidth) {
        width = maxWidth;
      }
      this.config.computedWidth = width;
    }
  }, {
    key: 'parseLayoutWidth',
    value: function parseLayoutWidth() {
      var _this8 = this;

      var width = this.computedWidth;

      var marginLeft = (0, _util.parseMarginAuto)(this.marginLeft);
      var marginRight = (0, _util.parseMarginAuto)(this.marginRight);
      width += marginLeft + marginRight;
      if (this.boxSizing !== 'border-box') {
        var props = ['borderLeft', 'borderRight', 'paddingLeft', 'paddingRight'];
        props.forEach(function (item) {
          width += _this8[item] || 0;
        });
      }
      this.layoutWidth = width;
    }
  }, {
    key: 'parseComputedHeight',
    value: function parseComputedHeight() {
      var height = this.getFlexBasis('height');
      if (height === undefined) {
        height = this.offsetHeight || 0;
      }
      var minHeight = this.minHeight;
      var maxHeight = this.maxHeight;
      if (maxHeight && minHeight && maxHeight < minHeight) {
        maxHeight = minHeight;
      }
      if (minHeight && height < minHeight) {
        height = minHeight;
      }
      if (maxHeight && height > maxHeight) {
        height = maxHeight;
      }
      this.config.computedHeight = height;
    }
  }, {
    key: 'parseLayoutHeight',
    value: function parseLayoutHeight() {
      var _this9 = this;

      var height = this.computedHeight;

      var marginTop = (0, _util.parseMarginAuto)(this.marginTop);
      var marginBottom = (0, _util.parseMarginAuto)(this.marginBottom);
      height += marginTop + marginBottom;
      if (this.boxSizing !== 'border-box') {
        var props = ['borderTop', 'borderBottom', 'paddingTop', 'paddingBottom'];
        props.forEach(function (item) {
          height += _this9[item] || 0;
        });
      }
      this.layoutHeight = height;
    }
  }, {
    key: 'computedWidth',
    get: function get() {
      return this.config.computedWidth;
    },
    set: function set(value) {
      this.config.computedWidth = value;
      this.parseLayoutWidth();
    }
  }, {
    key: 'computedHeight',
    get: function get() {
      return this.config.computedHeight;
    },
    set: function set(value) {
      this.config.computedHeight = value;
      this.parseLayoutHeight();
    }
  }]);
  return Config;
}();

exports.default = Config;